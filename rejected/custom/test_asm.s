
test_asm.o:	file format elf64-bpf

Disassembly of section .text:

0000000000000000 <spill>:
; int __noinline spill(int cr, int ci) {
       0:	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
       1:	b7 03 00 00 00 00 00 00	r3 = 0x0
       2:	b7 05 00 00 00 00 00 00	r5 = 0x0
       3:	b7 02 00 00 00 00 00 00	r2 = 0x0
       4:	b7 06 00 00 00 00 00 00	r6 = 0x0
;     while (i < 100 && zr * zr + zi * zi + zk * zk - zl * zl * (zi - 1) < 4) {
       5:	bf 64 00 00 00 00 00 00	r4 = r6

0000000000000030 <LBB0_1>:
       6:	b7 00 00 00 01 00 00 00	r0 = 0x1
       7:	1f 20 00 00 00 00 00 00	r0 -= r2
       8:	2f 30 00 00 00 00 00 00	r0 *= r3
       9:	2f 30 00 00 00 00 00 00	r0 *= r3
      10:	bf 59 00 00 00 00 00 00	r9 = r5
      11:	2f 99 00 00 00 00 00 00	r9 *= r9
      12:	2f 44 00 00 00 00 00 00	r4 *= r4
      13:	bf 27 00 00 00 00 00 00	r7 = r2
      14:	2f 77 00 00 00 00 00 00	r7 *= r7
      15:	bf 78 00 00 00 00 00 00	r8 = r7
      16:	0f 48 00 00 00 00 00 00	r8 += r4
      17:	0f 98 00 00 00 00 00 00	r8 += r9
      18:	0f 08 00 00 00 00 00 00	r8 += r0
      19:	67 08 00 00 20 00 00 00	r8 <<= 0x20
      20:	c7 08 00 00 20 00 00 00	r8 s>>= 0x20
      21:	bf 30 00 00 00 00 00 00	r0 = r3
      22:	65 08 14 00 03 00 00 00	if r8 s> 0x3 goto +0x14 <LBB0_3>
;         zi    = 2 * zr * zi + ci;
      23:	2f 26 00 00 00 00 00 00	r6 *= r2
      24:	67 06 00 00 01 00 00 00	r6 <<= 0x1
      25:	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
      26:	0f 26 00 00 00 00 00 00	r6 += r2
;         zk    = 3 * zr - zi * zi * zk * zr;
      27:	bf 62 00 00 00 00 00 00	r2 = r6
      28:	2f 52 00 00 00 00 00 00	r2 *= r5
      29:	2f 62 00 00 00 00 00 00	r2 *= r6
      30:	b7 05 00 00 03 00 00 00	r5 = 0x3
      31:	1f 25 00 00 00 00 00 00	r5 -= r2
;         int t = zr * zr - zi * zi + cr;
      32:	1f 74 00 00 00 00 00 00	r4 -= r7
      33:	0f 14 00 00 00 00 00 00	r4 += r1
      34:	b7 00 00 00 64 00 00 00	r0 = 0x64
;         zk    = 3 * zr - zi * zi * zk * zr;
      35:	2f 45 00 00 00 00 00 00	r5 *= r4
;         i = i + 1;
      36:	07 03 00 00 01 00 00 00	r3 += 0x1
      37:	bf 37 00 00 00 00 00 00	r7 = r3
      38:	67 07 00 00 20 00 00 00	r7 <<= 0x20
      39:	77 07 00 00 20 00 00 00	r7 >>= 0x20
      40:	bf 62 00 00 00 00 00 00	r2 = r6
      41:	bf 46 00 00 00 00 00 00	r6 = r4
;     while (i < 100 && zr * zr + zi * zi + zk * zk - zl * zl * (zi - 1) < 4) {
      42:	55 07 db ff 64 00 00 00	if r7 != 0x64 goto -0x25 <LBB0_1>

0000000000000158 <LBB0_3>:
;     return i;
      43:	95 00 00 00 00 00 00 00	exit

0000000000000160 <pk>:
; void __noinline pk(char s) {
      44:	bf 13 00 00 00 00 00 00	r3 = r1
;     bpf_trace_printk("%c", 1, s);
      45:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x0 ll
      47:	b7 02 00 00 01 00 00 00	r2 = 0x1
      48:	85 00 00 00 06 00 00 00	call 0x6
; }
      49:	95 00 00 00 00 00 00 00	exit

0000000000000190 <pk_l>:
; void __noinline pk_l(char *s) {
      50:	bf 13 00 00 00 00 00 00	r3 = r1
;     bpf_trace_printk("%s", 1, s);
      51:	18 01 00 00 03 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x3 ll
      53:	b7 02 00 00 01 00 00 00	r2 = 0x1
      54:	85 00 00 00 06 00 00 00	call 0x6
; }
      55:	95 00 00 00 00 00 00 00	exit

Disassembly of section xdp:

0000000000000000 <prog>:
;     int s = spill(1, 2);
       0:	b7 01 00 00 01 00 00 00	r1 = 0x1
       1:	b7 02 00 00 02 00 00 00	r2 = 0x2
       2:	85 10 00 00 ff ff ff ff	call -0x1
       3:	bf 06 00 00 00 00 00 00	r6 = r0
;         pk(res[i]);
       4:	18 07 00 00 0a 00 00 00 00 00 00 00 00 00 00 00	r7 = 0xa ll
       6:	71 71 00 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x0)
       7:	67 01 00 00 38 00 00 00	r1 <<= 0x38
       8:	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
       9:	85 10 00 00 ff ff ff ff	call -0x1
      10:	71 71 01 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x1)
      11:	67 01 00 00 38 00 00 00	r1 <<= 0x38
      12:	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
      13:	85 10 00 00 ff ff ff ff	call -0x1
      14:	71 71 02 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x2)
      15:	67 01 00 00 38 00 00 00	r1 <<= 0x38
      16:	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
      17:	85 10 00 00 ff ff ff ff	call -0x1
      18:	71 71 03 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x3)
      19:	67 01 00 00 38 00 00 00	r1 <<= 0x38
      20:	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
      21:	85 10 00 00 ff ff ff ff	call -0x1
      22:	71 71 04 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x4)
      23:	67 01 00 00 38 00 00 00	r1 <<= 0x38
      24:	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
      25:	85 10 00 00 ff ff ff ff	call -0x1
      26:	71 71 05 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x5)
      27:	67 01 00 00 38 00 00 00	r1 <<= 0x38
      28:	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
      29:	85 10 00 00 ff ff ff ff	call -0x1
      30:	71 71 06 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x6)
      31:	67 01 00 00 38 00 00 00	r1 <<= 0x38
      32:	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
      33:	85 10 00 00 ff ff ff ff	call -0x1
      34:	71 71 07 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x7)
      35:	67 01 00 00 38 00 00 00	r1 <<= 0x38
      36:	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
      37:	85 10 00 00 ff ff ff ff	call -0x1
      38:	71 71 08 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x8)
      39:	67 01 00 00 38 00 00 00	r1 <<= 0x38
      40:	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
      41:	85 10 00 00 ff ff ff ff	call -0x1
      42:	71 71 09 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x9)
      43:	67 01 00 00 38 00 00 00	r1 <<= 0x38
      44:	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
      45:	85 10 00 00 ff ff ff ff	call -0x1
;     pk_l(res);
      46:	18 01 00 00 0a 00 00 00 00 00 00 00 00 00 00 00	r1 = 0xa ll
      48:	85 10 00 00 ff ff ff ff	call -0x1
;     pk_l(ores);
      49:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0x0 ll
      51:	85 10 00 00 ff ff ff ff	call -0x1
;     pk(res[0]);
      52:	71 71 00 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x0)
      53:	67 01 00 00 38 00 00 00	r1 <<= 0x38
      54:	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
      55:	85 10 00 00 ff ff ff ff	call -0x1
;     res[0] = s;
      56:	73 67 00 00 00 00 00 00	*(u8 *)(r7 + 0x0) = r6
;     return 0;
      57:	b7 00 00 00 00 00 00 00	r0 = 0x0
      58:	95 00 00 00 00 00 00 00	exit
